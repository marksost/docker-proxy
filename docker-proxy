#!/usr/bin/env bash

set -e -o pipefail

# Name of the utility
readonly SELF=$(basename $0)
# Version of the utility
readonly VERSION="1.0.0"

# Shell output colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function that starts the service's container when possible
start() {

    # Check if container is already running
    if [ "$(container_status)" == "running" ]; then
        echored "Proxy is already running."
        exit 0;
    fi

    # Check if container image needs to be pulled
    if ! proxy_image_exists; then
        echogreen "Proxy image not found.  Pulling image..."
        pull_latest_proxy_image
    fi

    echogreen "Starting container..."
    if [ "$(container_status)" == "not found" ]; then
        docker_command
    else
        docker start http-proxy 1> /dev/null
    fi

    # Check if the DNS resolver file exists
    if ! resolver_file_exists; then
        echogreen "/etc/resolver/docker does not exist. Creating... (this will prompt for password)"
        create_or_update_resolver_file
    fi

    # Check if the DNS resolver file is up to date
    if ! resolver_file_up_to_date; then
        echogreen "/etc/resolver/docker is out of date. Updating... (this will prompt for password)"
        create_or_update_resolver_file
    fi

}

# Function that stops the service's container if it's running
stop() {

    # Check that container is running
    if [ "$(container_status)" != "running" ]; then
        echored "Proxy is not running."
        exit 0;
    fi

    # Stop the container
    echored "Stopping the proxy container..."
    docker rm -f http-proxy 1> /dev/null

}

# Function that first stops then starts the service's container
restart() {

    stop
    start

}

# Function that updates the container's image to the latest version
update() {

    echogreen "Pulling latest proxy image..."
    pull_latest_proxy_image

}

########### DNS Resolver Functions ###########

# Creates or update the resolver file if needed
create_or_update_resolver_file() {

    sudo mkdir -p /etc/resolver

    generate_resolver_file | sudo tee /etc/resolver/docker 1> /dev/null
    sudo killall -HUP mDNSResponder

}

# Function that generates text for a DNS resolver file
generate_resolver_file() {

    cat <<EOF

# Generated by docker-proxy

nameserver 127.0.0.1
port 19322

EOF

}

# Returns true if the resolver file already exists, false otherwise
resolver_file_exists() {

    [ -f "/etc/resolver/docker" ]

}

# Checks if the resolver file is up to date or not based on generation text
resolver_file_up_to_date() {

    diff -q /etc/resolver/docker <(generate_resolver_file) 1> /dev/null

}

########### Helper Functions ###########

# Returns the status of the container
container_status() {

    docker inspect --format='{{.State.Status}}' http-proxy 2> /dev/null | sed '/^$/d' || echo 'not found'

}

# Function to handle exiting with an error
die() {

    echored >&2 "$@"
    exit 1

}

# Function that starts the service's container for the first time
docker_command() {

    docker run -d --restart=always -v /var/run/docker.sock:/tmp/docker.sock:ro -p 8080:80 -p 44343:443 -p 19322:19322/udp -e CONTAINER_NAME=http-proxy --name http-proxy codekitchen/dinghy-http-proxy 1> /dev/null

}

# Returns true if docker is running, false otherwise
docker_is_running() {

    docker info &> /dev/null

}

# Function used to color echo text in green
echogreen() {

    echo -e "${GREEN}$@${NC}"

}

# Function used to color echo text in red
echored() {

    echo -e "${RED}$@${NC}"

}

# Returns true if container image exists, false otherwise
proxy_image_exists() {

    [ "$(docker images codekitchen/dinghy-http-proxy | wc -l)" -eq "2" ]

}

# Function that pulls the latest version of the container's image
pull_latest_proxy_image() {

    docker pull codekitchen/dinghy-http-proxy:latest

}

########### Script Utility Functions ###########

# Function that outputs usage information
usage() {

    cat <<EOF

Usage: $SELF [command]

  $SELF status      Prints the status of the docker proxy
  $SELF start       Starts the docker proxy
  $SELF stop        Stops the docker proxy
  $SELF restart     Restarts the docker proxy
  $SELF update      Pulls the latest image for the docker proxy
  $SELF help        Shows this message
  $SELF version     Prints the version number

EOF

}

# Function that outputs version information
version() {

    echo "$SELF version $VERSION"

}

# Function that outputs the status of the utility
status() {

    cat <<EOF

Docker:     running
Image:      $(proxy_image_exists && echo 'downloaded')$(proxy_image_exists || echo 'not found')
Container:  $(container_status)

EOF

}

case $1 in
    help|-h|--help)
        usage
        exit 0
    ;;

    version|--version)
        version
        exit 0
    ;;

    status|start|stop|restart|update)
        # Check that docker is running
        ! [ docker_is_running ] && die "Cannot connect to the Docker daemon. Is the docker daemon running on this host?"

        # Calls one of the methods
        $1
    ;;

    *)
        usage
        exit 1
    ;;
esac
